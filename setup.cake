#load "nuget:https://www.myget.org/F/cake-contrib/api/v2?package=Cake.Recipe&prerelease"
#tool "nuget:?package=Codecov&version=1.0.3"

Environment.SetVariableNames();

BuildParameters.SetParameters(context: Context,
                              buildSystem: BuildSystem,
                              sourceDirectoryPath: "./Source",
                              title: "Cake.Codecov",
                              repositoryOwner: "cake-contrib",
                              repositoryName: "Cake.Codecov",
                              appVeyorAccountName: "cakecontrib",
                              shouldRunDotNetCorePack: true,
                              shouldBuildNugetSourcePackage: false,
                              shouldExecuteGitLink: true,
                              shouldGenerateDocumentation: false);

BuildParameters.PrintParameters(Context);

ToolSettings.SetToolSettings(context: Context,
                             dupFinderExcludePattern: new string[] {
                                 BuildParameters.RootDirectoryPath + "/Source/Cake.Codecov.Tests/*.cs"
                             },
                             dupFinderExcludeFilesByStartingCommentSubstring: new string[] {
                                 "<auto-generated>"
                             },
                             testCoverageFilter: "+[Cake.Codecov]*");

// Tasks we want to override
BuildParameters.Tasks.UploadCodecovReportTask.Task.Actions.Clear();
BuildParameters.Tasks.UploadCodecovReportTask.Does(() => {
        var file = GetFiles(BuildParameters.SourceDirectoryPath + "/**/" + BuildParameters.Configuration + "/net46/Cake.Codecov.dll").First();
        var tool = Context.Tools.Resolve("Codecov.exe");
        var reportFile = BuildParameters.Paths.Files.TestCoverageOutputFilePath;
        Information("Loading built addin from: {0}", file);
        Information("Using Codecov tool from: {0}", tool);
        Information("Using Coverage report from: {0}", reportFile);
        var script = string.Format(@"#reference ""{0}""
Codecov(new CodecovSettings {{
    ToolPath = ""{1}"",
    Files = new[] {{ ""{2}"" }},
    Root = ""{3}"",
    Required = true,
    EnvironmentVariables = new Dictionary<string,string> {{ {{ ""APPVEYOR_BUILD_VERSION"", EnvironmentVariable(""TEMP_BUILD_VERSION"") }} }}
}});",
            file, tool, reportFile, BuildParameters.RootDirectoryPath);
        RequireAddin(script, new Dictionary<string,string> {
            { "TEMP_BUILD_VERSION", BuildParameters.Version.FullSemVersion + ".build." + BuildSystem.AppVeyor.Environment.Build.Number }
            });

});

// Enable drafting a release when running on the master branch
if (BuildParameters.IsRunningOnAppVeyor &&
    BuildParameters.IsMainRepository && BuildParameters.IsMasterBranch && !BuildParameters.IsTagged)
{
    BuildParameters.Tasks.AppVeyorTask.IsDependentOn("Create-Release-Notes");
}


Build.RunDotNetCore();
